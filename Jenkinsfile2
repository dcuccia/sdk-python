pipeline {
     options {
     buildDiscarder(logRotator(numToKeepStr: '7'))
 }
    agent { label 'ai_back' }
    parameters { gitParameter tagFilter: '*', name: 'TAG', type: 'PT_TAG', defaultValue: 'master'
          choice(
          choices: ['DEV' , 'PROD'],
            description: '',
            name: 'SDK_ENVIRONMENT')   
    }
        
    stages {
        
        stage('Checkout deployment tools from GIT') {
            steps {
                checkout([$class                           : 'GitSCM',
                          branches                         : [[name: "${params.TAG}"]], 
                          doGenerateSubmoduleConfigurations: false,
                          extensions                       : [],
                          gitTool                          : 'Default', 
                          submoduleCfg                     : [],
                          userRemoteConfigs                : [
                                  [credentialsId: 'centos',
                                   //refspec      : '+refs/tags/*:refs/remotes/origin/tags/*',
                                   url          : 'git@github.com:dicomgrid/sdk-python-dev.git']
                          ]
                ])
            }
        }

        stage('Vault') {
            steps {
                script {
                    withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: 'vault1', vaultAddr: 'http://10.10.20.214:8200']]) {
                        sh "vault read -field=configsdk  kv/secret/sdk > .secrets.toml"
                    }
                }
            }
        }
        
        stage('Remove image') {
            steps {
              sh "docker rmi -f ambra_sdk_tag || true"
            }
        }

        stage('Build image') {
            steps {
              sh "docker build -t ambra_sdk_tag ."
            }
        }        

        stage('Flake8') {
            steps {
              sh "docker run ambra_sdk_tag poetry run flake8"
              // sh '[ $? -eq 0 ] && exit 0'
              sh 'if [ $? -eq 0 ] ; then echo Test flake8 is complited; else echo Test flake8 is broken && exit 1; fi'
            }
        }   

        stage('Mypy') {
            steps {
              sh "docker run ambra_sdk_tag poetry run mypy ambra_sdk"
              sh 'if [ $? -eq 0 ] ; then echo Test mypy is complited; else echo Test mypy is broken && exit 1; fi'
            }
        }   
        
        stage('Pytest') {
            steps {
                sh "docker run --mount type=bind,source=/spool/workspace/sdk_python_dev_tag/.secrets.toml,target=/src/.secrets.toml --mount type=bind,source=/etc/hosts,target=/etc/hosts ambra_sdk_tag poetry run pytest"
                sh 'if [ $? -eq 0 ] ; then echo Test pytest is complited; else echo Test pytest is broken && exit 1; fi'
            }
        }   
        
        stage('Poetry build') {
            steps {
                sh "python --version"
                sh "/home/centos/.poetry/bin/poetry build"
                sh 'if [ $? -eq 0 ] ; then echo Build is complited; else echo Build is broken && exit 1; fi'
            }
        }        

        stage('Poetry publish to prod') {
            steps {
                when {
                expression { params.SDK_ENVIRONMENT == 'PROD' }
               }
                withCredentials([string(credentialsId: 'token', variable: 'token')]){
                sh "/home/centos/.poetry/bin/poetry config pypi-token.pypi $token"
                // sh "echo $token > token && cat token"
                sh "/home/centos/.poetry/bin/poetry  publish"
             
                }
            }
        }           

        stage('Poetry publish to dev ') {
            steps {
                when {
                expression { params.SDK_ENVIRONMENT == 'DEV' }
               }
                 withCredentials([string(credentialsId: 'token_test', variable: 'token2')]){
                 sh "/home/centos/.poetry/bin/poetry config repositories.testpypi https://test.pypi.org/legacy"    
                 sh "/home/centos/.poetry/bin/poetry config pypi-token.testpypi $token2"
                 sh "/home/centos/.poetry/bin/poetry publish -r testpypi" 
                
                }
            }
        }     

    }
        
 post {
        always {
            cleanWs()
        }
    }
}     
